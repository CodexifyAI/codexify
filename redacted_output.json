<!doctype html>
<html lang=en>
  <head>
    <title>FileNotFoundError: [Errno 2] No such file or directory: 'example glossary'
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QRFLq8Ee01fw9yrlP2SC";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>FileNotFoundError</h1>
<div class="detail">
  <p class="errormsg">FileNotFoundError: [Errno 2] No such file or directory: &#39;example glossary&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-11751367376">
  <h4>File <cite class="filename">"/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">2213</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-13363275792">
  <h4>File <cite class="filename">"/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">2193</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-13363275904">
  <h4>File <cite class="filename">"/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">2190</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-13363276016">
  <h4>File <cite class="filename">"/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1486</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-13363276128">
  <h4>File <cite class="filename">"/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1484</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-13363276240">
  <h4>File <cite class="filename">"/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1469</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-13363276352">
  <h4>File <cite class="filename">"/Users/sidmohan/Desktop/codexify/api/app.py"</cite>,
      line <em class="line">401</em>,
      in <code class="function">api_process_json</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>return data_dict</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Process and redact the data using the existing synthetic data logic</pre>
<pre class="line before"><span class="ws">        </span>data_dict = json.loads(file.read())</pre>
<pre class="line current"><span class="ws">        </span>synthetic_json = json_synthetic_data_add(data_dict)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Write the redacted data back to a JSON file</pre>
<pre class="line after"><span class="ws">        </span>temp_json.write(json.dumps(synthetic_json).encode())</pre>
<pre class="line after"><span class="ws">        </span># temp_json.write(data.to_json(orient=&#39;records&#39;).encode())</pre></div>
</div>

<li><div class="frame" id="frame-13363276464">
  <h4>File <cite class="filename">"/Users/sidmohan/Desktop/codexify/api/app.py"</cite>,
      line <em class="line">375</em>,
      in <code class="function">json_synthetic_data_add</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>def json_synthetic_data_add(data_dict):</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>for key, value in data_dict.items():</pre>
<pre class="line before"><span class="ws">                </span>if isinstance(value, dict):</pre>
<pre class="line current"><span class="ws">                    </span>json_synthetic_data_add(value)</pre>
<pre class="line after"><span class="ws">                </span>elif isinstance(value, list):</pre>
<pre class="line after"><span class="ws">                    </span>for index, item in enumerate(item):</pre>
<pre class="line after"><span class="ws">                        </span>if isinstance(item, dict):</pre>
<pre class="line after"><span class="ws">                            </span>json_synthetic_data_add(data_dict)</pre>
<pre class="line after"><span class="ws">                        </span>else:</pre></div>
</div>

<li><div class="frame" id="frame-13363276576">
  <h4>File <cite class="filename">"/Users/sidmohan/Desktop/codexify/api/app.py"</cite>,
      line <em class="line">386</em>,
      in <code class="function">json_synthetic_data_add</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                            </span>item_str = str(item)</pre>
<pre class="line before"><span class="ws">                            </span>if detect_pii(item_str) or any(keyword in item_str.lower() for keyword in pii_keywords):</pre>
<pre class="line before"><span class="ws">                                </span>value[index] = redaction_func(item_str)</pre>
<pre class="line before"><span class="ws">                </span>else:</pre>
<pre class="line before"><span class="ws">                    </span>value_str = str(value)</pre>
<pre class="line current"><span class="ws">                    </span>recognizer = NamedEntityRecognizer(value_str)</pre>
<pre class="line after"><span class="ws">                    </span>recognizer.assign_entities_with_presidio()</pre>
<pre class="line after"><span class="ws">                    </span>recognizer.assign_entities_manually()</pre>
<pre class="line after"><span class="ws">                    </span>recognizer.assign_organization_entity_with_model()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">                    </span>generator = FakerGenerator(data,recognizer.dict_global_entities)</pre></div>
</div>

<li><div class="frame" id="frame-13363276688">
  <h4>File <cite class="filename">"/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/nerpii/named_entity_recognizer.py"</cite>,
      line <em class="line">234</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>NamedEntityRecognizer</pre>
<pre class="line before"><span class="ws">            </span>A NamedEntityRecognizer instance.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not isinstance(df_input, pd.DataFrame):</pre>
<pre class="line current"><span class="ws">            </span>df_input = pd.read_csv(df_input)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>df_input = get_gender(df_input)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.dataset = df_input.sample(n=min(data_sample, df_input.shape[0]))</pre>
<pre class="line after"><span class="ws">        </span>self.object_columns = list(self.dataset.select_dtypes([&#34;object&#34;]).columns)</pre></div>
</div>

<li><div class="frame" id="frame-13363276800">
  <h4>File <cite class="filename">"/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/util/_decorators.py"</cite>,
      line <em class="line">211</em>,
      in <code class="function">wrapper</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                        </span>f&#34;or {repr(new_arg_name)}, not both.&#34;</pre>
<pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws">                    </span>raise TypeError(msg)</pre>
<pre class="line before"><span class="ws">                </span>else:</pre>
<pre class="line before"><span class="ws">                    </span>kwargs[new_arg_name] = new_arg_value</pre>
<pre class="line current"><span class="ws">            </span>return func(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return cast(F, wrapper)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return _deprecate_kwarg</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-13415535376">
  <h4>File <cite class="filename">"/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/util/_decorators.py"</cite>,
      line <em class="line">331</em>,
      in <code class="function">wrapper</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>warnings.warn(</pre>
<pre class="line before"><span class="ws">                    </span>msg.format(arguments=_format_argument_list(allow_args)),</pre>
<pre class="line before"><span class="ws">                    </span>FutureWarning,</pre>
<pre class="line before"><span class="ws">                    </span>stacklevel=find_stack_level(),</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line current"><span class="ws">            </span>return func(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># error: &#34;Callable[[VarArg(Any), KwArg(Any)], Any]&#34; has no</pre>
<pre class="line after"><span class="ws">        </span># attribute &#34;__signature__&#34;</pre>
<pre class="line after"><span class="ws">        </span>wrapper.__signature__ = new_sig  # type: ignore[attr-defined]</pre>
<pre class="line after"><span class="ws">        </span>return wrapper</pre></div>
</div>

<li><div class="frame" id="frame-13415535488">
  <h4>File <cite class="filename">"/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/io/parsers/readers.py"</cite>,
      line <em class="line">950</em>,
      in <code class="function">read_csv</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>prefix,</pre>
<pre class="line before"><span class="ws">        </span>defaults={&#34;delimiter&#34;: &#34;,&#34;},</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>kwds.update(kwds_defaults)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>return _read(filepath_or_buffer, kwds)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># iterator=True -&gt; TextFileReader</pre>
<pre class="line after"><span class="ws"></span>@overload</pre>
<pre class="line after"><span class="ws"></span>def read_table(</pre></div>
</div>

<li><div class="frame" id="frame-13415675072">
  <h4>File <cite class="filename">"/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/io/parsers/readers.py"</cite>,
      line <em class="line">605</em>,
      in <code class="function">_read</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Check for duplicates in names.</pre>
<pre class="line before"><span class="ws">    </span>_validate_names(kwds.get(&#34;names&#34;, None))</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Create the parser.</pre>
<pre class="line current"><span class="ws">    </span>parser = TextFileReader(filepath_or_buffer, **kwds)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>if chunksize or iterator:</pre>
<pre class="line after"><span class="ws">        </span>return parser</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>with parser:</pre></div>
</div>

<li><div class="frame" id="frame-13415675184">
  <h4>File <cite class="filename">"/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/io/parsers/readers.py"</cite>,
      line <em class="line">1442</em>,
      in <code class="function">__init__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if &#34;has_index_names&#34; in kwds:</pre>
<pre class="line before"><span class="ws">            </span>self.options[&#34;has_index_names&#34;] = kwds[&#34;has_index_names&#34;]</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>self.handles: IOHandles | None = None</pre>
<pre class="line current"><span class="ws">        </span>self._engine = self._make_engine(f, self.engine)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def close(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>if self.handles is not None:</pre>
<pre class="line after"><span class="ws">            </span>self.handles.close()</pre>
<pre class="line after"><span class="ws">        </span>self._engine.close()</pre></div>
</div>

<li><div class="frame" id="frame-13415675296">
  <h4>File <cite class="filename">"/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/io/parsers/readers.py"</cite>,
      line <em class="line">1735</em>,
      in <code class="function">_make_engine</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span># c engine can decode utf-8 bytes, adding TextIOWrapper makes</pre>
<pre class="line before"><span class="ws">                </span># the c-engine especially for memory_map=True far slower</pre>
<pre class="line before"><span class="ws">                </span>is_text = False</pre>
<pre class="line before"><span class="ws">                </span>if &#34;b&#34; not in mode:</pre>
<pre class="line before"><span class="ws">                    </span>mode += &#34;b&#34;</pre>
<pre class="line current"><span class="ws">            </span>self.handles = get_handle(</pre>
<pre class="line after"><span class="ws">                </span>f,</pre>
<pre class="line after"><span class="ws">                </span>mode,</pre>
<pre class="line after"><span class="ws">                </span>encoding=self.options.get(&#34;encoding&#34;, None),</pre>
<pre class="line after"><span class="ws">                </span>compression=self.options.get(&#34;compression&#34;, None),</pre>
<pre class="line after"><span class="ws">                </span>memory_map=self.options.get(&#34;memory_map&#34;, False),</pre></div>
</div>

<li><div class="frame" id="frame-13415675408">
  <h4>File <cite class="filename">"/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/io/common.py"</cite>,
      line <em class="line">856</em>,
      in <code class="function">get_handle</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>elif isinstance(handle, str):</pre>
<pre class="line before"><span class="ws">        </span># Check whether the filename is to be opened in binary mode.</pre>
<pre class="line before"><span class="ws">        </span># Binary mode does not support &#39;encoding&#39; and &#39;newline&#39;.</pre>
<pre class="line before"><span class="ws">        </span>if ioargs.encoding and &#34;b&#34; not in ioargs.mode:</pre>
<pre class="line before"><span class="ws">            </span># Encoding</pre>
<pre class="line current"><span class="ws">            </span>handle = open(</pre>
<pre class="line after"><span class="ws">                </span>handle,</pre>
<pre class="line after"><span class="ws">                </span>ioargs.mode,</pre>
<pre class="line after"><span class="ws">                </span>encoding=ioargs.encoding,</pre>
<pre class="line after"><span class="ws">                </span>errors=errors,</pre>
<pre class="line after"><span class="ws">                </span>newline=&#34;&#34;,</pre></div>
</div>
</ul>
  <blockquote>FileNotFoundError: [Errno 2] No such file or directory: &#39;example glossary&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py&#34;, line 2213, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py&#34;, line 2193, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py&#34;, line 2190, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py&#34;, line 1486, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py&#34;, line 1484, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py&#34;, line 1469, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
  File &#34;/Users/sidmohan/Desktop/codexify/api/app.py&#34;, line 401, in api_process_json
    synthetic_json = json_synthetic_data_add(data_dict)
  File &#34;/Users/sidmohan/Desktop/codexify/api/app.py&#34;, line 375, in json_synthetic_data_add
    json_synthetic_data_add(value)
  File &#34;/Users/sidmohan/Desktop/codexify/api/app.py&#34;, line 386, in json_synthetic_data_add
    recognizer = NamedEntityRecognizer(value_str)
  File &#34;/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/nerpii/named_entity_recognizer.py&#34;, line 234, in __init__
    df_input = pd.read_csv(df_input)
  File &#34;/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/util/_decorators.py&#34;, line 211, in wrapper
    return func(*args, **kwargs)
  File &#34;/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/util/_decorators.py&#34;, line 331, in wrapper
    return func(*args, **kwargs)
  File &#34;/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/io/parsers/readers.py&#34;, line 950, in read_csv
    return _read(filepath_or_buffer, kwds)
  File &#34;/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/io/parsers/readers.py&#34;, line 605, in _read
    parser = TextFileReader(filepath_or_buffer, **kwds)
  File &#34;/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/io/parsers/readers.py&#34;, line 1442, in __init__
    self._engine = self._make_engine(f, self.engine)
  File &#34;/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/io/parsers/readers.py&#34;, line 1735, in _make_engine
    self.handles = get_handle(
  File &#34;/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/io/common.py&#34;, line 856, in get_handle
    handle = open(
FileNotFoundError: [Errno 2] No such file or directory: &#39;example glossary&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py", line 2213, in __call__
    return self.wsgi_app(environ, start_response)
  File "/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py", line 2193, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py", line 2190, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py", line 1486, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py", line 1484, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/flask/app.py", line 1469, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
  File "/Users/sidmohan/Desktop/codexify/api/app.py", line 401, in api_process_json
    synthetic_json = json_synthetic_data_add(data_dict)
  File "/Users/sidmohan/Desktop/codexify/api/app.py", line 375, in json_synthetic_data_add
    json_synthetic_data_add(value)
  File "/Users/sidmohan/Desktop/codexify/api/app.py", line 386, in json_synthetic_data_add
    recognizer = NamedEntityRecognizer(value_str)
  File "/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/nerpii/named_entity_recognizer.py", line 234, in __init__
    df_input = pd.read_csv(df_input)
  File "/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/util/_decorators.py", line 211, in wrapper
    return func(*args, **kwargs)
  File "/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/util/_decorators.py", line 331, in wrapper
    return func(*args, **kwargs)
  File "/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/io/parsers/readers.py", line 950, in read_csv
    return _read(filepath_or_buffer, kwds)
  File "/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/io/parsers/readers.py", line 605, in _read
    parser = TextFileReader(filepath_or_buffer, **kwds)
  File "/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/io/parsers/readers.py", line 1442, in __init__
    self._engine = self._make_engine(f, self.engine)
  File "/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/io/parsers/readers.py", line 1735, in _make_engine
    self.handles = get_handle(
  File "/Users/sidmohan/.pyenv/versions/3.10.5/lib/python3.10/site-packages/pandas/io/common.py", line 856, in get_handle
    handle = open(
FileNotFoundError: [Errno 2] No such file or directory: 'example glossary'


-->
